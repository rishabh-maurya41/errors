<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ws="http://jax-ws.dev.java.net/spring/core" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security 
    http://www.springframework.org/schema/security/spring-security.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jms
	http://www.springframework.org/schema/jms/spring-jms-3.1.xsd"
	xmlns:jms="http://www.springframework.org/schema/jms">

	<!-- Enable auto-wiring -->
	<context:annotation-config />

	<!-- Scan for auto-wiring classes in spring saml packages -->
	<context:component-scan base-package="org.springframework.security.saml" />

	<!-- Unsecured pages -->
	<security:http security="none" pattern="/favicon.ico" />
	<security:http security="none" pattern="/images/**" />
	<security:http security="none" pattern="/css/**" />
	<security:http security="none" pattern="/assets/**" />
	<security:http security="none" pattern="/styles/**" />

	<!-- Handler deciding where to redirect user after successful login -->
	<bean id="successRedirectHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/" />
	</bean>
	<!-- Use the following for interpreting RelayState coming from unsolicited 
		response as redirect URL: <bean id="successRedirectHandler" class="org.springframework.security.saml.SAMLRelayStateSuccessHandler"> 
		<property name="defaultTargetUrl" value="/" /> </bean> -->

	<!-- Handler deciding where to redirect user after failed login -->
	<bean id="failureRedirectHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="useForward" value="true" />
		<property name="defaultFailureUrl" value="/" />
	</bean>

	<!-- Handler for successful logout -->
	<bean id="successLogoutHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<!-- Register authentication manager for SAML provider -->
		<security:authentication-provider
			ref="samlAuthenticationProvider" />
		<!-- Register authentication manager for administration UI -->
		<security:authentication-provider>
			<security:user-service id="adminInterfaceService">
				<security:user name="admin" password="@aLC0n$12"
					authorities="ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- Logger for SAML messages and events -->
	<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger" />

	<!-- Central storage of cryptographic keys -->
	<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<constructor-arg value="classpath:security/samlKeystore.jks" />
		<constructor-arg type="java.lang.String" value="nalle123" />
		<constructor-arg>
			<map>
				<entry key="apollo" value="nalle123" />
			</map>
		</constructor-arg>
		<constructor-arg type="java.lang.String" value="apollo" />
	</bean>

	<!-- Entry point to initialize authentication, default values taken from 
		properties file -->
	<bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
		<property name="defaultProfileOptions">
			<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="includeScoping" value="false" />
			</bean>
		</property>
	</bean>

	<!-- IDP Discovery Service -->
	<bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
		<property name="idpSelectionPath" value="/WEB-INF/security/ssoLogin.jsp" />
	</bean>

	<!-- SAML Authentication Provider responsible for validating of received 
		SAML messages -->
	<bean id="samlAuthenticationProvider"
		class="org.springframework.security.saml.SAMLAuthenticationProvider">
		<!-- OPTIONAL property: can be used to store/load user data after login -->
		<!-- <property name="userDetails" ref="bean" /> -->
	</bean>

	<!-- Provider of default SAML Context -->
	<bean id="contextProvider"
		class="org.springframework.security.saml.context.SAMLContextProviderImpl" />

	<!-- Processing filter for WebSSO profile messages -->
	<bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Processing filter for WebSSO Holder-of-Key profile -->
	<bean id="samlWebSSOHoKProcessingFilter"
		class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Logout handler terminating local session -->
	<bean id="logoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="false" />
	</bean>

	<!-- Override default logout processing filter with the one processing SAML 
		messages -->
	<bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
		<constructor-arg index="2" ref="logoutHandler" />
	</bean>

	<!-- Filter processing incoming logout messages -->
	<!-- First argument determines URL user will be redirected to after successful 
		global logout -->
	<bean id="samlLogoutProcessingFilter"
		class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
	</bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<bean id="processor"
		class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<constructor-arg>
			<list>
				<ref bean="redirectBinding" />
				<ref bean="postBinding" />
				<ref bean="artifactBinding" />
				<ref bean="soapBinding" />
				<ref bean="paosBinding" />
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<bean id="webSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" />

	<!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
	<bean id="hokWebSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 Web SSO profile -->
	<bean id="webSSOprofile"
		class="org.springframework.security.saml.websso.WebSSOProfileImpl" />

	<!-- SAML 2.0 Holder-of-Key Web SSO profile -->
	<bean id="hokWebSSOProfile"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 ECP profile -->
	<bean id="ecpprofile"
		class="org.springframework.security.saml.websso.WebSSOProfileECPImpl" />

	<!-- SAML 2.0 Logout Profile -->
	<bean id="logoutprofile"
		class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" />

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<bean id="postBinding"
		class="org.springframework.security.saml.processor.HTTPPostBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
	</bean>

	<bean id="redirectBinding"
		class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="artifactBinding"
		class="org.springframework.security.saml.processor.HTTPArtifactBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
		<constructor-arg>
			<bean
				class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
				<constructor-arg>
					<bean class="org.apache.commons.httpclient.HttpClient">
						<constructor-arg>
							<bean
								class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />
						</constructor-arg>
					</bean>
				</constructor-arg>
				<property name="processor">
					<bean
						class="org.springframework.security.saml.processor.SAMLProcessorImpl">
						<constructor-arg ref="soapBinding" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="soapBinding"
		class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="paosBinding"
		class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<!-- Initialization of OpenSAML library -->
	<bean class="com.auth.Bootstrap" />

	<!-- Initialization of the velocity engine -->
	<bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
		factory-method="getEngine" />

	<!-- XML parser pool needed for OpenSAML parsing WARNING: If customizing 
		a ParserPool implementation See https://shibboleth.net/community/advisories/secadv_20131213.txt 
		Specifically the following should be explicitly set to avoid exploits: 1) 
		set pool property 'expandEntityReferences' to 'false' 2) set feature 'javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING' 
		to true 3) set feature 'http://apache.org/xml/features/disallow-doctype-decl' 
		to true. This is a Xerces-specific feature, including derivatives such as 
		the internal JAXP implementations supplied with the Oracle and OpenJDK JREs. 
		For other JAXP implementations, consult the documentation for the implementation 
		for guidance on how to achieve a similar configuration. -->
	<bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool"
		init-method="initialize" />

	<bean id="parserPoolHolder"
		class="org.springframework.security.saml.parser.ParserPoolHolder" />

	<bean id="interceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="UserBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userbo" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>

	<bean id="EmployeeBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="employeeBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>
	
	<!-- Added by Lokesh starts here -->
	
	<bean id="EmployeeNoAutoBenchBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="employeeNoAutoBenchBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>
	
	
	<bean id="ProjectNoAutoBenchBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="projectNoAutoBenchBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>
	
	
	<bean id="EmployeeNoAutoBenchDAO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="employeeNoAutoBenchDAO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>
	
	
	<bean id="ProjectNoAutoBenchDAO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="projectNoAutoBenchDAO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>
	<!-- Added by Lokesh ends here -->

	<bean id="MasterBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="masterBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>

	<bean id="ProjectBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="projectBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>

	<bean id="OpportunityBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="opportunityBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>

	<bean id="BudgetBO" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="budgetBO" />
		<property name="interceptorNames">
			<list>
				<value>interceptor</value>
			</list>
		</property>
	</bean>

	<bean id="daoSupport" class="com.services.persistence.DAOSupport">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<bean id="userbo" class="com.bo.user.UserBO">
		<property name="userdao" ref="userdao"></property>
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="projectDAO" ref="projectDAO"></property>
		<property name="masterBO" ref="masterBO"></property>
	</bean>

	<bean id="employeeBO" class="com.bo.employee.EmployeeBO">
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="masterBO" ref="masterBO"></property>
		<!--ram:: added projectDAO reference-->
		<property name="projectDAO" ref="projectDAO"></property>
	</bean>
	
	<bean id="employeeNoAutoBenchBO" class="com.bo.employee.EmployeeNoAutoBenchBO">
		<property name="employeeNoAutoBenchDAO" ref="employeeNoAutoBenchDAO"></property>
		<property name="masterBO" ref="masterBO"></property>
		<!--ram:: added projectDAO reference-->
		<property name="projectNoAutoBenchDAO" ref="projectNoAutoBenchDAO"></property>
	</bean>

	<bean id="projectBO" class="com.bo.project.ProjectBO">
		<property name="projectDAO" ref="projectDAO"></property>
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="sendEmail" ref="sendEmail"></property>
		<property name="masterBO" ref="masterBO"></property>
	</bean>
	
	<bean id="projectNoAutoBenchBO" class="com.bo.project.ProjectNoAutoBenchBO">
		<property name="projectNoAutoBenchDAO" ref="projectNoAutoBenchDAO"></property>
		<property name="employeeNoAutoBenchDAO" ref="employeeNoAutoBenchDAO"></property>
		<property name="sendEmail" ref="sendEmail"></property>
		<property name="masterBO" ref="masterBO"></property>
	</bean>

	<bean id="sendEmail" class="com.util.SendEmail">
		<property name="emailDAO" ref="emailDAO"></property>
	</bean>

	<bean id="opportunityBO" class="com.bo.opportunities.OpportunityBO">
		<property name="opportunityDAO" ref="opportunityDAO"></property>
		<property name="projectDAO" ref="projectDAO"></property>
		<property name="budgetDAO" ref="budgetDAO"></property>
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="masterBO" ref="masterBO"></property>
	</bean>

	<bean id="budgetBO" class="com.bo.budget.BudgetBO">
		<property name="budgetDAO" ref="budgetDAO"></property>
		<property name="projectDAO" ref="projectDAO"></property>
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="masterBO" ref="masterBO"></property>
	</bean>

	<bean id="masterDAO" parent="daoSupport" class="com.dao.master.MasterDAO"></bean>
	<bean id="employeeDAO" parent="daoSupport" class="com.dao.employee.EmployeeDAO"></bean>
	<bean id="employeeNoAutoBenchDAO" parent="daoSupport" class="com.dao.employee.EmployeeNoAutoBenchDAO"></bean>
	<bean id="userdao" parent="daoSupport" class="com.dao.user.UserDAO"></bean>
	<bean id="projectDAO" parent="daoSupport" class="com.dao.project.ProjectDAO"></bean>
	<bean id="projectNoAutoBenchDAO" parent="daoSupport" class="com.dao.project.ProjectNoAutoBenchDAO"></bean>
	<bean id="opportunityDAO" parent="daoSupport" class="com.dao.opportunities.OpportunityDAO">
	</bean>
	<bean id="budgetDAO" parent="daoSupport" class="com.dao.budget.BudgetDAO"></bean>
	<bean id="emailDAO" parent="daoSupport" class="com.dao.master.EmailDAO"></bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="2097152" />
	</bean>



	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.order_inserts">true</prop>
				<prop key="hibernate.order_updates">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>db.mapping.hbm.xml</value>
			</list>
		</property>
	</bean>

	<beans profile="dev">
	
		<!-- <security:http pattern="/saml/web/**" use-expressions="false">
			<security:csrf disabled="true" />
			<security:access-denied-handler
				error-page="/saml/web/metadata/login" />
			<security:form-login login-processing-url="/saml/web/login"
				login-page="/saml/web/metadata/login" default-target-url="/saml/web/metadata" />
			<security:intercept-url pattern="/saml/web/metadata/login"
				access="IS_AUTHENTICATED_ANONYMOUSLY" />
			<security:intercept-url pattern="/saml/web/**"
				access="ROLE_ADMIN" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
		</security:http>

		<security:http entry-point-ref="samlEntryPoint"
			use-expressions="false">
			<security:csrf disabled="true" />
			<security:intercept-url pattern="/**"
				access="IS_AUTHENTICATED_FULLY" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
			<security:custom-filter after="BASIC_AUTH_FILTER"
				ref="samlFilter" />
		</security:http>

		<bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
			<security:filter-chain-map request-matcher="ant">
				<security:filter-chain pattern="/saml/login/**"
					filters="samlEntryPoint" />
				<security:filter-chain pattern="/saml/logout/**"
					filters="samlLogoutFilter" />
				<security:filter-chain pattern="/saml/metadata/**"
					filters="metadataDisplayFilter" />
				<security:filter-chain pattern="/saml/SSO/**"
					filters="samlWebSSOProcessingFilter" />
				<security:filter-chain pattern="/saml/SSOHoK/**"
					filters="samlWebSSOHoKProcessingFilter" />
				<security:filter-chain pattern="/saml/SingleLogout/**"
					filters="samlLogoutProcessingFilter" />
				<security:filter-chain pattern="/saml/discovery/**"
					filters="samlIDPDiscovery" />
			</security:filter-chain-map>
		</bean> -->

	<bean id="masterBO" class="com.bo.master.MasterBO">
			<property name="masterDAO" ref="masterDAO"></property>
            <property name="employeeDAO" ref="employeeDAO"></property>
            
			<!--  <property name="sftphost" value="128.199.194.18" />
			<property name="sftpport" value="22" />
			<property name="sftpuser" value="root" />
			<property name="sftppass" value="curosys16" /> -->
			<property name="sftphost" value="10.2.52.144" />
			<property name="sftpport" value="22" />
			<property name="sftpuser" value="testftp" />
			<!-- <property name="sftppass" value="S@pc$$fTp15#" />-->
			<!-- <property name="empdir" value="/curo/GHRMS/EMP" />
			<property name="prjdir" value="/curo/ALCON/Projectdetails" />
			<property name="ctrdir" value="/curo/ALCON/Contract" />
			<property name="ppdir" value="/curo/ALCON/Pipeline" />
			<property name="actualdir" value="/curo/PBS" />
			<property name="assetdir" value="/curo/ALCON/Asset" />
			<property name="allocationdir" value="/curo/XLS" />
			<property name="assetXLDir" value="/curo/uploadasset" />
			<property name="sapXLDir" value="/curo/uploadsap" />-->
			<property name="empdir" value="/GHRMS/EMP" />
			<property name="prjdir" value="/ALCON/Projectdetails" />
			<property name="ctrdir" value="/ALCON/Contract" />
			<property name="ppdir" value="/ALCON/Pipeline" />
			<property name="actualdir" value="/PBS" />
			<property name="assetdir" value="/ALCON/AssetToAlcon" />
			<property name="allocationdir" value="/XLS" />
			<property name="assetXLDir" value="/SAP/Asset" />
			<property name="sapXLDir" value="/SAP" />
			<property name="sapXLFPDir" value="/SAP/fp" />
			<!--Vamsi : 27-11-2017-->

		</bean>

		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
			<!-- <property name="jdbcUrl" value="jdbc:mysql://10.40.2.59:3306/cssis_uat?useSSL=false"/> -->   
			 <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/alcon_css_zool?useSSL=false" />
			<!--  <property name="jdbcUrl" value="jdbc:mysql://10.9.17.59:3306/alcon_css?useSSL=false" />  -->  
			<!-- <property name="user" value="css_admin" /> -->
		<!--	 <property name="user" value="css_admin" /> -->
		<!--	 <property name="password" value="C2jcsc7ck" /> -->
			  <property name="user" value="alconusr" />
			<property name="password" value="!A2vBeKQ@" /> 
			<property name="acquireIncrement" value="2" />
			<property name="minPoolSize" value="2" />
			<property name="maxPoolSize" value="25" />
			<property name="maxIdleTime" value="3000" />
		</bean>

		<!-- Filter automatically generates default SP metadata -->
		<bean id="metadataGeneratorFilter"
			class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
					<property name="extendedMetadata">
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="idpDiscoveryEnabled" value="true" />
						</bean>
					</property>
					<!--<property name="entityId"
						value="https://localhost:8443/CssCorp/saml/metadata" />
					<property name="entityBaseURL" value="https://localhost:8443/CssCorp" /> -->
					 <property name="entityId"
						value="http://localhost:8080/CssCorpUat/saml/metadata" />
					<property name="entityBaseURL" value="http://localhost:8080/CssCorp" /> 
				</bean>
			</constructor-arg>
		</bean>

		<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
			and presents SP metadata there -->
		<bean id="metadataDisplayFilter"
			class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

		<!-- Configure HTTP Client to accept certificates from the keystore for 
			HTTPS verification -->
		<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
			<property name="sslHostnameVerification" value="default"/> </bean> -->

		<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
			trust is here -->
		<bean id="metadata"
			class="org.springframework.security.saml.metadata.CachingMetadataManager">
			<constructor-arg>
				<list>
					<!-- Example of classpath metadata with Extended Metadata -->
					<bean
						class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
						<constructor-arg>
							<bean
								class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
								<constructor-arg>
									<bean class="java.util.Timer" />
								</constructor-arg>
								<constructor-arg>
									<bean class="org.opensaml.util.resource.ClasspathResource">
										<constructor-arg value="/metadata/DevFederationMetadata.xml" />
									</bean>
								</constructor-arg>
								<property name="parserPool" ref="parserPool" />
							</bean>
						</constructor-arg>
						<constructor-arg>
							<bean
								class="org.springframework.security.saml.metadata.ExtendedMetadata">
							</bean>
						</constructor-arg>
						<property name="metadataTrustCheck" value="false" />
					</bean>
				</list>
			</constructor-arg>
			<!-- OPTIONAL used when one of the metadata files contains information 
				about this service provider -->
			<!-- <property name="hostedSPName" value=""/> -->
			<!-- OPTIONAL property: can tell the system which IDP should be used for 
				authenticating user by default. -->
			<!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
		</bean>
	</beans>
		<beans profile="test">

		<bean id="masterBO" class="com.bo.master.MasterBO">
			<property name="masterDAO" ref="masterDAO"></property>

			<property name="sftphost" value="128.199.194.18" />
			<property name="sftpport" value="22" />
			<property name="sftpuser" value="root" />
			<property name="sftppass" value="curosys16" />
			<property name="empdir" value="/GHRMS/EMP" />
			<property name="prjdir" value="/ALCON/Projectdetails" />
			<property name="ctrdir" value="/ALCON/Contract" />
			<property name="ppdir" value="/ALCON/Pipeline" />
			<property name="actualdir" value="/PBS" />
			<!-- Sreenadh : chnaged folder name as per ram inputs -->
			<property name="assetdir" value="/ALCON/AssetToAlcon" />
			<property name="allocationdir" value="/XLS" />
			<property name="assetXLDir" value="/curo/uploadasset" />
			<property name="sapXLDir" value="/curo/uploadsap" />
			<!--Vamsi : 27-11-2017-->
			<property name="sapXLFPDir" value="/curo/uploadsap" />
		</bean>
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl"
				value="jdbc:mysql://127.0.0.1:3306/cssis_uat?useSSL=false" />
			<property name="user" value="admin" />
			<property name="password" value="curodb" />
			<property name="acquireIncrement" value="2" />
			<property name="minPoolSize" value="2" />
			<property name="maxPoolSize" value="25" />
			<property name="maxIdleTime" value="3000" />
		</bean>
		<!-- Filter automatically generates default SP metadata -->
		<bean id="metadataGeneratorFilter"
			class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
					<property name="extendedMetadata">
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="idpDiscoveryEnabled" value="true" />
						</bean>
					</property>
					<property name="entityId"
						value="https://localhost:8443/CssCorp/saml/metadata" />
					<property name="entityBaseURL" value="https://localhost:8443/CssCorp" />
				</bean>
			</constructor-arg>
		</bean>

		<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
			and presents SP metadata there -->
		<bean id="metadataDisplayFilter"
			class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

		<!-- Configure HTTP Client to accept certificates from the keystore for 
			HTTPS verification -->
		<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
			<property name="sslHostnameVerification" value="default"/> </bean> -->

		<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
			trust is here -->
		<bean id="metadata"
			class="org.springframework.security.saml.metadata.CachingMetadataManager">
			<constructor-arg>
				<list>
					<!-- Example of classpath metadata with Extended Metadata -->
					<bean
						class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
						<constructor-arg>
							<bean
								class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
								<constructor-arg>
									<bean class="java.util.Timer" />
								</constructor-arg>
								<constructor-arg>
									<bean class="org.opensaml.util.resource.ClasspathResource">
										<constructor-arg value="/metadata/TestFederationMetadata.xml" />
									</bean>
								</constructor-arg>
								<property name="parserPool" ref="parserPool" />
							</bean>
						</constructor-arg>
						<constructor-arg>
							<bean
								class="org.springframework.security.saml.metadata.ExtendedMetadata">
							</bean>
						</constructor-arg>
						<property name="metadataTrustCheck" value="false" />
					</bean>
				</list>
			</constructor-arg>
			<!-- OPTIONAL used when one of the metadata files contains information 
				about this service provider -->
			<!-- <property name="hostedSPName" value=""/> -->
			<!-- OPTIONAL property: can tell the system which IDP should be used for 
				authenticating user by default. -->
			<!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
		</bean>
	</beans>

	<beans profile="uat">
	
		<!-- Security for the administration UI -->
		<!-- Added on 27-Oct-2020 to disable SSO -Starts -->
	<!-- 	<security:http pattern="/saml/web/**" use-expressions="false">
			<security:csrf disabled="true" />
			<security:access-denied-handler
				error-page="/saml/web/metadata/login" />
			<security:form-login login-processing-url="/saml/web/login"
				login-page="/saml/web/metadata/login" default-target-url="/saml/web/metadata" />
			<security:intercept-url pattern="/saml/web/metadata/login"
				access="IS_AUTHENTICATED_ANONYMOUSLY" />
			<security:intercept-url pattern="/saml/web/**"
				access="ROLE_ADMIN" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
		</security:http>  -->

		<!-- Secured pages with SAML as entry point -->
		<!-- <security:http entry-point-ref="samlEntryPoint"
			use-expressions="false">
			<security:csrf disabled="true" />
			<security:intercept-url pattern="/**"
				access="IS_AUTHENTICATED_FULLY" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
			<security:custom-filter after="BASIC_AUTH_FILTER"
				ref="samlFilter" />
		</security:http>  -->

		<!-- Filters for processing of SAML messages -->
		<!-- <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
			<security:filter-chain-map request-matcher="ant">
				<security:filter-chain pattern="/saml/login/**"
					filters="samlEntryPoint" />
				<security:filter-chain pattern="/saml/logout/**"
					filters="samlLogoutFilter" />
				<security:filter-chain pattern="/saml/metadata/**"
					filters="metadataDisplayFilter" />
				<security:filter-chain pattern="/saml/SSO/**"
					filters="samlWebSSOProcessingFilter" />
				<security:filter-chain pattern="/saml/SSOHoK/**"
					filters="samlWebSSOHoKProcessingFilter" />
				<security:filter-chain pattern="/saml/SingleLogout/**"
					filters="samlLogoutProcessingFilter" />
				<security:filter-chain pattern="/saml/discovery/**"
					filters="samlIDPDiscovery" />
			</security:filter-chain-map>
		</bean>  -->
		<!-- Added on 27-Oct-2020 to disable SSO -Ends -->
		<bean id="masterBO" class="com.bo.master.MasterBO">
			<property name="masterDAO" ref="masterDAO"></property>

			<property name="sftphost" value="10.2.52.161" />
			<property name="sftpport" value="22" />
			<property name="sftpuser" value="qapouser" />
			<property name="sftppass" value="ZFkl@bxUvTWI=" />
			<property name="empdir" value="/GHRMS/EMP" />
			<property name="prjdir" value="/ALCON/Projectdetails" />
			<property name="ctrdir" value="/ALCON/Contract" />
			<property name="ppdir" value="/ALCON/Pipeline" />
			<property name="actualdir" value="/PBS" />
			<!-- Sreenadh : chnaged folder name as per ram inputs -->
			<property name="assetdir" value="/ALCON/AssetToAlcon" />			
			<property name="allocationdir" value="/XLS" />
			<property name="assetXLDir" value="/SAP/Asset" />
			<property name="sapXLDir" value="/ALCON/BillingData-QA" />
		</bean>

		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl"
				value="jdbc:mysql://10.40.2.59:3306/alcon_css?useSSL=false" />
			<property name="user" value="css_admin" />
			<property name="password" value="C2jcsc7ck" />
			<property name="acquireIncrement" value="2" />
			<property name="minPoolSize" value="2" />
			<property name="maxPoolSize" value="25" />
			<property name="maxIdleTime" value="3000" />
		</bean>

		<!-- Filter automatically generates default SP metadata -->
		<bean id="metadataGeneratorFilter"
			class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
					<property name="extendedMetadata">
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="idpDiscoveryEnabled" value="true" />
						</bean>
					</property>
					<!-- <property name="entityId" value="https://alconuat.csscorp.com/saml/metadata" />
					<property name="entityBaseURL" value="https://alconuat.csscorp.com" /> -->
					<property name="entityId" value="http://10.40.2.59:8080/CssCorp/saml/metadata" />
					<property name="entityBaseURL" value="https://alconuat.csscorp.com/CssCorp" />
				</bean>
			</constructor-arg>
		</bean>

		<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
			and presents SP metadata there -->
		<bean id="metadataDisplayFilter"
			class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

		<!-- Configure HTTP Client to accept certificates from the keystore for 
			HTTPS verification -->
		<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
			<property name="sslHostnameVerification" value="default"/> </bean> -->

		<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
			trust is here -->
		<bean id="metadata"
			class="org.springframework.security.saml.metadata.CachingMetadataManager">
			<constructor-arg>
				<list>
					<!-- Example of classpath metadata with Extended Metadata -->
					<bean
						class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
						<constructor-arg>
							<bean
								class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
								<constructor-arg>
									<bean class="java.util.Timer" />
								</constructor-arg>
								<constructor-arg>
									<bean class="org.opensaml.util.resource.ClasspathResource">
										<constructor-arg value="/metadata/UatFederationMetadata.xml" />
									</bean>
								</constructor-arg>
								<property name="parserPool" ref="parserPool" />
							</bean>
						</constructor-arg>
						<constructor-arg>
							<bean
								class="org.springframework.security.saml.metadata.ExtendedMetadata">
							</bean>
						</constructor-arg>
						<property name="metadataTrustCheck" value="false" />
					</bean>
				</list>
			</constructor-arg>
			<!-- OPTIONAL used when one of the metadata files contains information 
				about this service provider -->
			<!-- <property name="hostedSPName" value=""/> -->
			<!-- OPTIONAL property: can tell the system which IDP should be used for 
				authenticating user by default. -->
			<!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
		</bean>
	</beans>

	<beans profile="demo">

		<bean id="masterBO" class="com.bo.master.MasterBO">
			<property name="masterDAO" ref="masterDAO"></property>

			<property name="sftphost" value="128.199.194.18" />
			<property name="sftpport" value="22" />
			<property name="sftpuser" value="root" />
			<property name="sftppass" value="curosys16" />
			<property name="empdir" value="/curo/GHRMS/EMP" />
			<property name="prjdir" value="/curo/ALCON/Projectdetails" />
			<property name="ctrdir" value="/curo/ALCON/Contract" />
			<property name="ppdir" value="/curo/ALCON/Pipeline" />
			<property name="actualdir" value="/curo/PBS" />
			<property name="assetdir" value="/curo/ALCON/Asset" />
			<property name="allocationdir" value="/curo/XLS" />
			<property name="assetXLDir" value="/curo/uploadasset" />
			<property name="sapXLDir" value="/curo/uploadsap" />
			<!--Vamsi : 27-11-2017-->
			<property name="sapXLFPDir" value="/curo/uploadsap" />
		</bean>

		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl"
				value="jdbc:mysql://127.0.0.1:3306/cssdb_demo?useSSL=false" />
			<property name="user" value="admin" />
			<property name="password" value="curodb" />
			<property name="acquireIncrement" value="2" />
			<property name="minPoolSize" value="2" />
			<property name="maxPoolSize" value="25" />
			<property name="maxIdleTime" value="3000" />
		</bean>

		<!-- Filter automatically generates default SP metadata -->
		<bean id="metadataGeneratorFilter"
			class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
					<property name="extendedMetadata">
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="idpDiscoveryEnabled" value="true" />
						</bean>
					</property>
					<property name="entityId" value="https://csscorp.curodev.in/saml/metadata" />
					<property name="entityBaseURL" value="https://csscorp.curodev.in" />
				</bean>
			</constructor-arg>
		</bean>

		<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
			and presents SP metadata there -->
		<bean id="metadataDisplayFilter"
			class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

		<!-- Configure HTTP Client to accept certificates from the keystore for 
			HTTPS verification -->
		<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
			<property name="sslHostnameVerification" value="default"/> </bean> -->

		<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
			trust is here -->
		<bean id="metadata"
			class="org.springframework.security.saml.metadata.CachingMetadataManager">
			<constructor-arg>
				<list>
					<!-- Example of classpath metadata with Extended Metadata -->
					<bean
						class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
						<constructor-arg>
							<bean
								class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
								<constructor-arg>
									<bean class="java.util.Timer" />
								</constructor-arg>
								<constructor-arg>
									<bean class="org.opensaml.util.resource.ClasspathResource">
										<constructor-arg value="/metadata/DemoFederationMetadata.xml" />
									</bean>
								</constructor-arg>
								<property name="parserPool" ref="parserPool" />
							</bean>
						</constructor-arg>
						<constructor-arg>
							<bean
								class="org.springframework.security.saml.metadata.ExtendedMetadata">
							</bean>
						</constructor-arg>
						<property name="metadataTrustCheck" value="false" />
					</bean>
				</list>
			</constructor-arg>
			<!-- OPTIONAL used when one of the metadata files contains information 
				about this service provider -->
			<!-- <property name="hostedSPName" value=""/> -->
			<!-- OPTIONAL property: can tell the system which IDP should be used for 
				authenticating user by default. -->
			<!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
		</bean>
	</beans>

	<beans profile="prod">

		<!-- Security for the administration UI -->
		<security:http pattern="/saml/web/**" use-expressions="false">
			<security:csrf disabled="true" />
			<security:access-denied-handler
				error-page="/saml/web/metadata/login" />
			<security:form-login login-processing-url="/saml/web/login"
				login-page="/saml/web/metadata/login" default-target-url="/saml/web/metadata" />
			<security:intercept-url pattern="/saml/web/metadata/login"
				access="IS_AUTHENTICATED_ANONYMOUSLY" />
			<security:intercept-url pattern="/saml/web/**"
				access="ROLE_ADMIN" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
		</security:http>

		<!-- Secured pages with SAML as entry point -->
		<security:http entry-point-ref="samlEntryPoint"
			use-expressions="false">
			<security:csrf disabled="true" />
			<security:intercept-url pattern="/**"
				access="IS_AUTHENTICATED_FULLY" />
			<security:custom-filter before="FIRST"
				ref="metadataGeneratorFilter" />
			<security:custom-filter after="BASIC_AUTH_FILTER"
				ref="samlFilter" />
		</security:http>

		<!-- Filters for processing of SAML messages -->
		<bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
			<security:filter-chain-map request-matcher="ant">
				<security:filter-chain pattern="/saml/login/**"
					filters="samlEntryPoint" />
				<security:filter-chain pattern="/saml/logout/**"
					filters="samlLogoutFilter" />
				<security:filter-chain pattern="/saml/metadata/**"
					filters="metadataDisplayFilter" />
				<security:filter-chain pattern="/saml/SSO/**"
					filters="samlWebSSOProcessingFilter" />
				<security:filter-chain pattern="/saml/SSOHoK/**"
					filters="samlWebSSOHoKProcessingFilter" />
				<security:filter-chain pattern="/saml/SingleLogout/**"
					filters="samlLogoutProcessingFilter" />
				<security:filter-chain pattern="/saml/discovery/**"
					filters="samlIDPDiscovery" />
			</security:filter-chain-map>
		</bean>
		
		<bean id="masterBO" class="com.bo.master.MasterBO">
			<property name="masterDAO" ref="masterDAO"></property>

			<property name="sftphost" value="awserpsles025.ad.csscorp.com" />
			<property name="sftpport" value="22" />
			<!-- Jegan : Credentials changed based on new SFTP on  13-Jan-2023 -->
			<!--<property name="sftpuser" value="sftpuser" />
			<property name="sftppass" value="SftPU$$eR132#" /> -->
			<property name="sftpuser" value="prodpouser" /> 
			<property name="sftppass" value="blzUjeOs3K6gr" />
			<property name="empdir" value="/GHRMS/EMP" />
			<property name="prjdir" value="/ALCON/Projectdetails" />
			<property name="ctrdir" value="/ALCON/Contract" />
			<!--<property name="ppdir" value="/ftp/ALCON/Pipeline" />
			<property name="actualdir" value="/ftp/PBS" />
			<property name="assetdir" value="/ftp/ALCON/AssetToAlcon" />
			<property name="allocationdir" value="/ftp/ALCON/XLS" />
			<property name="assetXLDir" value="/ftp/ALCON/AssetToAlcon" /> -->
			<!--Jegan : 1-13-2023 : BillingData-QA for testing to be replaced as BillingData-->
			<property name="sapXLDir" value="/ALCON/BillingData" />
			<!--Vamsi : 27-11-2017-->
			<!--Jegan : 1-13-2023 : BillingData-QA for testing to be replaced as BillingData-->
			<property name="sapXLFPDir" value="/ALCON/BillingData" />
		</bean>

		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl"
				value="jdbc:mysql://localhost:3306/alcon_css?useSSL=false" />
			<property name="user" value="alconusr" />
		    <property name="password" value="!A2vBeKQ@" /> 
			<!--<property name="password" value="qVe6B3vV" /> -->
			<property name="acquireIncrement" value="2" />
			<property name="minPoolSize" value="2" />
			<property name="maxPoolSize" value="25" />
			<property name="maxIdleTime" value="3000" />
		</bean>

		<!-- Filter automatically generates default SP metadata -->
		<bean id="metadataGeneratorFilter"
			class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
					<property name="extendedMetadata">
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="idpDiscoveryEnabled" value="true" />
						</bean>
					</property>
					<property name="entityId" value="https://alcon.csscorp.com/saml/metadata" />
					<property name="entityBaseURL" value="https://alcon.csscorp.com" />
				</bean>
			</constructor-arg>
		</bean>

		<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
			and presents SP metadata there -->
		<bean id="metadataDisplayFilter"
			class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

		<!-- Configure HTTP Client to accept certificates from the keystore for 
			HTTPS verification -->
		<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
			<property name="sslHostnameVerification" value="default"/> </bean> -->

		<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
			trust is here -->
		<bean id="metadata"
			class="org.springframework.security.saml.metadata.CachingMetadataManager">
			<constructor-arg>
				<list>
					<!-- Example of classpath metadata with Extended Metadata -->
					<bean
						class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
						<constructor-arg>
							<bean
								class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
								<constructor-arg>
									<bean class="java.util.Timer" />
								</constructor-arg>
								<constructor-arg>
									<bean class="org.opensaml.util.resource.ClasspathResource">
										<constructor-arg value="/metadata/ProdFederationMetadata.xml" />
									</bean>
								</constructor-arg>
								<property name="parserPool" ref="parserPool" />
							</bean>
						</constructor-arg>
						<constructor-arg>
							<bean
								class="org.springframework.security.saml.metadata.ExtendedMetadata">
							</bean>
						</constructor-arg>
						<property name="metadataTrustCheck" value="false" />
					</bean>
				</list>
			</constructor-arg>
			<!-- OPTIONAL used when one of the metadata files contains information 
				about this service provider -->
			<!-- <property name="hostedSPName" value=""/> -->
			<!-- OPTIONAL property: can tell the system which IDP should be used for 
				authenticating user by default. -->
			<!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
		</bean>
	</beans>
	
	
</beans>